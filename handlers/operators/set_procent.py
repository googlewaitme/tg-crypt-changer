from loader import dp

from aiogram import types
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext

from states.operator_waiting import OperatorWaiting
from data.config import states
from keyboards.default import back_to_menu_key
from keyboards.operator.default import operator_menu_key


@dp.message_handler(Text('–ü—Ä–æ—Ü–µ–Ω—Çüìå'))
async def send_question(message: types.Message):
    now_procent = states['procent']
    text = f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç: {now_procent}"
    text += "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç:"
    markup = back_to_menu_key.get_markup()
    await message.answer(text, reply_markup=markup)
    await OperatorWaiting.INPUT_NEW_PROCENT.set()


@dp.message_handler(
    text_is_int=False,
    state=OperatorWaiting.INPUT_NEW_PROCENT
)
async def send_error_message(message: types.Message):
    await message.answer('–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º')


@dp.message_handler(
    text_is_int=True,
    state=OperatorWaiting.INPUT_NEW_PROCENT)
async def set_new_procent(message: types.Message, state: FSMContext):
    procent = int(message.text)
    states['procent'] = procent
    text = f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç: {procent}"
    menu_key = operator_menu_key.get_markup()
    await message.answer(text, reply_markup=menu_key)
    await state.finish()
